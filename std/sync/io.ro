
pub type Result(T) is alias std::error::Result(T, Error)

@non_exhaustive
pub type Error is
    inner: Option(any Error)
    
    | notFound
    | permissionDenied
    | connectionRefused
    | connectionReset
    | hostUnreachable
    | networkUnreachable
    | connectionAborted
    | notConnected
    | addrInUse
    | addrNotAvailable
    | networkDown
    | brokenPipe
    | alreadyExists
    | wouldBlock
    | notDirectory
    | isDirectory
    | directoryNotEmpty
    | readOnlyFilesystem
    | filesystemLoop
    | staleNetworkFileHandle
    | invalidInput
    | invalidData
    | timedOut
    | writeZero
    | storageFull
    | notSeekable
    | filesystemQuotaExceeded
    | fileTooLarge
    | resourceBusy
    | executableFileBusy
    | deadlock
    | crossesDevices
    | tooManyLinks
    | invalidFilename
    | argumentListTooLong
    | interrupted
    | unsupported
    | unexpectedEof
    | outOfMemory
    | other

    impl Error as
        func source(self) -> Option(any Error) do self.inner
    end
end

pub effect Io<T: Readable + Seekable + Writable> is alias Read<T>, Seek<T>, Write<T>

pub trait Readable is
    func str_chunks(self, size: nat) -> StrChunks(Self) do StrChunks(self, size)
    func str_slices(self, delimiter: char) -> StrSlices(Self) do StrSlices(self, delimiter)

    func byte_chunks(self, size: nat) -> ByteChunks(Self) do ByteChunks(self, size)
    func byte_slices(self, delimiter: nat8) -> ByteSlices(Self) do ByteSlices(self, delimiter)
end

pub effect Read(R: Readable) is
    func read_chars(mut self: R, count: nat) -> Result(str)
    func read_chars_until(mut self: R, ending: char) -> Result(str)
    func read_all_chars(mut self: R) -> io::Result(str)
    func read_str_chunks(mut self: R, size: nat) -> Result([str])
    func read_str_slices(mut self: R, delimiter: char) -> Result([str])

    func read_bytes(mut self: R, count: nat) -> Result([nat8])
    func read_bytes_until(mut self: R, ending: nat8) -> Result([nat8])
    func read_all_bytes(mut self: R) -> io::Result([nat8])
    func read_byte_chunks(mut self: R, size: nat) -> Result([[nat8]])
    func read_byte_slices(mut self: R, delimiter: nat8) -> Result([[nat8]])
end

pub type SeekFrom is
    | start(nat64)
    | current(int64)
    | end(int64)
end

pub trait Seekable is
    func rewind(mut self) -> Result(()) -< Seek(Self) do
        perform self.seek(SeekFrom.start(0))
            >-> (_) do ()
    end

    func stream_len(mut self) -> Result(nat64) -< Seek(Self) do
        pos := self.stream_pos().unwrap()
        res := perform self.seek(SeekFrom.end(0))
        perform self.seek(SeekFrom.start(pos))
        res
    end

    func stream_pos(mut self) -> Result(nat64) -< Seek(Self) do
        perform self.seek(SeekFrom.current(0))
    end
end

pub effect Seek(S: Seekable) is
    func seek(mut self: S, pos: SeekFrom) -> Result(nat64)
end

pub trait Writable

pub effect Write(W: Writable) is
    func write_bytes(mut self: W, bytes: [nat8]) -> Result(())
    func write_str(mut self: W, s: str) -> Result(())

    func flush(mut self: W) -> Result(())
end