##
pub trait PartialEquate<Rhs = Self> is
	func eq(self, Rhs rhs) bool

	func ne(self, Rhs rhs) bool do return not self.eq(rhs)
end

##
pub trait Equate(PartialEquate<Self>)

##
pub type Ordering is
	Less
	Equal
	Greater
end

##
pub trait PartialOrder(PartialEquate<Rhs = Self>) is
	func partial_compare(self, Rhs rhs) Option<Ordering>

	func lt(self, Rhs rhs) bool do if self.partial_compare(rhs) is
		Ordering:Less then return true
		else return false
	end

	func le(self, Rhs rhs) bool do if self.partial_compare(rhs) is
		Ordering:Greater then return false
		else return true
	end

	func gt(self, Rhs rhs) bool do if self.partial_compare(rhs) is
		Ordering:Greater then return true
		else return false
	end

	func ge(self, Rhs rhs) bool do if self.partial_compare(rhs) is
		Ordering:Less then return false
		else return true
	end
end

##
pub trait Order(Equate, PartialOrder<Self>) is
	func compare(self, Self rhs) Ordering

	func min(self, Self rhs) Self do if self.compare(rhs) is
		Ordering:Greater then return rhs
		else return self
	end

	func max(self, Self rhs) Self do if self.compare(rhs) is
		Ordering:Less then return rhs
		else return self
	end

	func clamp(self, Self min, Self max) Self do
		assert!(min <= max)
		if self < min then return min
		elif self > max then return max
		else return self
	end
end