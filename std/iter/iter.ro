pub trait Iterable is
    type Item

    func next(mut self) -> Option(Self::Item) -< `E

    func all(`F, mut self, f: F) -> bool -< `E where
        F: Func(Self::Item) -> bool
    do
        mut val := true

        for item in self do
            if !f(item) then
                val = false
                break
            end
        end

        val
    end

    func any(`F, mut self, f: F) -> bool -< `E where
        F: Func(Self::Item) -> bool
    do
        mut val := false

        for item in self do
            if f(item) then
                val = true
                break
            end
        end

        val
    end

    func find(`F, mut self, f: F) -> Option(Self::Item) -< `E where
        F: Func(Self::Item) -> bool
    do
        func check(`T, mut predicate: Func(T) -> bool) -> Func((), T) -> ControlFlow(T) do
            ((), x) do if predicate(x) then ControlFlow.break(x) else ControlFlow.continue(())
        end

        self.try_fold((), check(f)).break_value()
    end
end

pub trait ToIterable is
    type Iter: Iterable

    func to_iter(self) -> Self::Iter
end